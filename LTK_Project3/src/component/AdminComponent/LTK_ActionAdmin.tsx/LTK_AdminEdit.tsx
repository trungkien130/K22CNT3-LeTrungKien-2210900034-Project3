import React, { useState, useEffect } from "react";
import { Modal, Button, Form } from "react-bootstrap";
import instance from "../../../Api/LTK_Api";

const EditModal = ({
  show,
  handleClose,
  data,
  endpoint,
  fields = [],
  onSuccess,
}) => {
  const [formData, setFormData] = useState({});

  console.log("üìå Fields:", fields);
  console.log("üìå Data:", data);

  // C·∫≠p nh·∫≠t formData d·ª±a tr√™n data v√† fields
  useEffect(() => {
    if (!data || Object.keys(data).length === 0) {
      console.warn("üö® Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã!");
      return;
    }

    const formatDate = (date) => {
      if (!date || date === "Ch∆∞a c·∫≠p nh·∫≠t") return "";
      const parsedDate = new Date(date);
      return isNaN(parsedDate.getTime())
        ? ""
        : parsedDate.toISOString().split("T")[0];
    };

    // √Ånh x·∫° d·ªØ li·ªáu t·ª´ `data` sang `formData` d·ª±a tr√™n `fields`, lo·∫°i b·ªè ID
    const formattedData = {};
    fields.forEach((field) => {
      const fieldName = field.name;
      let value =
        data[fieldName] ?? data[fieldName.replace("ltk", "").toLowerCase()];

      // Kh√¥ng bao g·ªìm ID trong formData n·∫øu n√≥ l√† 'maSP' ho·∫∑c 'ltkMakh'
      if (fieldName === "maSP" || fieldName === "ltkMakh") {
        return; // B·ªè qua ID
      }

      // Format gi√° tr·ªã theo lo·∫°i tr∆∞·ªùng
      if (field.type === "date") {
        value = formatDate(value);
      } else if (field.type === "select") {
        if (fieldName === "ltkGioitinh") {
          value = data.gioiTinh === "Nam" ? "True" : "false";
        } else if (fieldName === "ltkTrangthai") {
          value = data.trangThai === "Ho·∫°t ƒë·ªông" ? "True" : "false";
        } else if (fieldName === "ltkRole") {
          value = data.role === "Admin" ? "True" : "false";
        }
      } else if (field.type === "number") {
        value = value != null ? Number(value) : 0; // Chuy·ªÉn th√†nh s·ªë
      } else {
        value = value ?? "";
      }

      formattedData[fieldName] = value;
    });

    console.log("üîÑ D·ªØ li·ªáu ƒë√£ format:", formattedData);
    setFormData(formattedData);
  }, [data, fields]);

  // X·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu
  const handleChange = (e) => {
    const { name, value } = e.target;
    // N·∫øu l√† tr∆∞·ªùng s·ªë, chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh s·ªë
    const updatedValue =
      fields.find((field) => field.name === name)?.type === "number"
        ? Number(value)
        : value;
    setFormData((prev) => ({ ...prev, [name]: updatedValue }));
  };

  // X·ª≠ l√Ω g·ª≠i d·ªØ li·ªáu l√™n server
  const handleSubmit = async () => {
    // T·∫°o payload m·ªõi, ƒë·∫£m b·∫£o kh√¥ng c√≥ maSP ho·∫∑c ltkMakh
    const payload = { ...formData };
    delete payload.maSP;
    delete payload.ltkMakh;

    console.log("üì§ D·ªØ li·ªáu g·ª≠i l√™n BE:", JSON.stringify(payload, null, 2));

    const id = data.maSP || data.maKH || data.ltkMakh; // L·∫•y ID t·ª´ data ban ƒë·∫ßu
    if (!id) {
      alert("L·ªói: Kh√¥ng t√¨m th·∫•y ID!");
      return;
    }

    try {
      const response = await instance.put(`${endpoint}/${id}`, payload);
      console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", response.data);
      alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      handleClose();
      if (onSuccess) onSuccess(); // G·ªçi h√†m l√†m m·ªõi danh s√°ch
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error.response?.data || error);
      alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  };

  return (
    <Modal show={show} onHide={handleClose} centered>
      <Modal.Header closeButton>
        <Modal.Title>‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          {fields.length > 0 ? (
            fields.map(({ name, label, type, options }, index) => {
              // Kh√¥ng hi·ªÉn th·ªã tr∆∞·ªùng ID trong form
              if (name === "maSP" || name === "ltkMakh") return null;

              return (
                <Form.Group key={name || `field-${index}`} className="mb-3">
                  <Form.Label>{label}</Form.Label>
                  {type === "select" ? (
                    <Form.Select
                      name={name}
                      value={formData[name] ?? ""}
                      onChange={handleChange}
                    >
                      {options?.map((opt) => (
                        <option key={opt.value} value={opt.value}>
                          {opt.label}
                        </option>
                      ))}
                    </Form.Select>
                  ) : (
                    <Form.Control
                      type={type}
                      name={name}
                      value={formData[name] ?? ""}
                      onChange={handleChange}
                    />
                  )}
                </Form.Group>
              );
            })
          ) : (
            <p className="text-danger">‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã!</p>
          )}
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          ƒê√≥ng
        </Button>
        <Button variant="primary" onClick={handleSubmit}>
          L∆∞u thay ƒë·ªïi
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default EditModal;
